import { getInput, setFailed } from "@actions/core";
import { getOctokit, context } from "@actions/github";
import { GitHub } from "@actions/github/lib/utils";

const token = getInput("token") || process.env.GH_PAT || process.env.GITHUB_TOKEN;
const [owner, repo] = (process.env.GITHUB_REPOSITORY || "").split("/");

export const run = async () => {
  const COMMAND = process.argv.pop();
  if (!COMMAND) throw new Error("Command not found");
  if (!token) throw new Error("GitHub token not found");

  const octokit = getOctokit(token);
  if (COMMAND === "onNewIssue") return onNewIssue(octokit);
  throw new Error("Command not recognized");
};

const onNewIssue = async (octokit: InstanceType<typeof GitHub>) => {
  const issue = await octokit.issues.get({
    owner: context.issue.owner,
    repo: context.issue.repo,
    issue_number: context.issue.number,
  });
  await octokit.issues.createComment({
    owner: context.issue.owner,
    repo: context.issue.repo,
    issue_number: context.issue.number,
    body: `<!-- This comment is autogenerated by book-tracker <https://github.com/AnandChowdhary/book-tracker> -->

...

When you've finished this books, just close this issue. Best of luck! 👍
`,
  });
};

run()
  .then(() => {})
  .catch((error) => {
    console.error("ERROR", error);
    setFailed(error.message);
  });
