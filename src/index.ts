import { getInput, setFailed } from "@actions/core";
import { getOctokit, context } from "@actions/github";
import { GitHub } from "@actions/github/lib/utils";
import { search } from "./goodreads";

const token = getInput("token") || process.env.GH_PAT || process.env.GITHUB_TOKEN;
const [owner, repo] = (process.env.GITHUB_REPOSITORY || "").split("/");

export const run = async () => {
  const COMMAND = getInput("command");
  if (!COMMAND) throw new Error("Command not found");
  if (!token) throw new Error("GitHub token not found");

  const octokit = getOctokit(token);
  if (COMMAND === "onNewIssue") return onNewIssue(octokit);
  if (COMMAND === "onCloseIssue") return onCloseIssue(octokit);
  throw new Error("Command not recognized");
};

const onCloseIssue = async (octokit: InstanceType<typeof GitHub>) => {
  await octokit.issues.addLabels({
    owner: context.issue.owner,
    repo: context.issue.repo,
    issue_number: context.issue.number,
    labels: [
      `completed in ${new Date().toLocaleString("en", { month: "long" }).toLowerCase()}`,
      `completed in ${new Date().getUTCFullYear()}`,
    ],
  });
};

const onNewIssue = async (octokit: InstanceType<typeof GitHub>) => {
  const key = getInput("goodreads-key") || process.env.GOODREADS_KEY || process.env.GOODREADS_KEY;
  const secret =
    getInput("goodreads-secret") || process.env.GOODREADS_SECRET || process.env.GOODREADS_SECRET;
  if (!key) throw new Error("GoodReads API key not found");
  if (!secret) throw new Error("GoodReads API secret not found");
  const issue = await octokit.issues.get({
    owner: context.issue.owner,
    repo: context.issue.repo,
    issue_number: context.issue.number,
  });
  let body =
    "<!-- This comment is autogenerated by book-tracker <https://github.com/AnandChowdhary/book-tracker> -->\n\n";
  const labels: string[] = [
    "book",
    `started in ${new Date().toLocaleString("en", { month: "long" }).toLowerCase()}`,
    `started in ${new Date().getUTCFullYear()}`,
  ];
  try {
    const details = await search(key, secret, issue.data.title);
    body += `Congrats on starting **${details.title}** by ${
      details.author
    }, I hope you enjoy it! It has an average of ${
      details.goodreads.averageRating
    }/5 stars and ${details.goodreads.ratingsCount.toLocaleString()} ratings on [Goodreads](https://www.goodreads.com/book/show/${
      details.goodreads.id
    }).\n\n<details>
 <summary>Book details (JSON)</summary>

\`\`\`json
${JSON.stringify(details, null, 2)}
\`\`\`

</details>`;
    labels.push(`${details.author.toLowerCase()}`);
    if (details.year) {
      labels.push(`${details.year} books`);
      labels.push(`${Math.floor(details.year / 10) * 10}s books`);
    }
  } catch (error) {
    body +=
      "I couldn't find details about this book using the GoodReads API. Don't worry, you can still track it.\n\n";
  }
  body += `When you're finished with reading this book, just close this issue and I'll mark it as completed. Best of luck! 👍`;
  await octokit.issues.createComment({
    owner: context.issue.owner,
    repo: context.issue.repo,
    issue_number: context.issue.number,
    body,
  });
  await octokit.issues.addLabels({
    owner: context.issue.owner,
    repo: context.issue.repo,
    issue_number: context.issue.number,
    labels,
  });
  await octokit.issues.lock({
    owner: context.issue.owner,
    repo: context.issue.repo,
    issue_number: context.issue.number,
  });
};

run()
  .then(() => {})
  .catch((error) => {
    console.error("ERROR", error);
    setFailed(error.message);
  });
